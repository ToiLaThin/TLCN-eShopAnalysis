// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShopAnalysis.CartOrderAPI.Infrastructure;

#nullable disable

namespace eShopAnalysis.CartOrderAPI.Migrations
{
    [DbContext(typeof(OrderCartContext))]
    [Migration("20231008082006_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eShopAnalysis.CartOrderAPI.Domain.DomainModels.CartAggregate.CartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FinalAfterSalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SaleType")
                        .HasColumnType("int");

                    b.Property<double>("SaleValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<double>("UnitAfterSalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "ProductModelId", "BusinessKey", "CartId");

                    b.HasIndex("CartId");

                    b.HasIndex(new[] { "ProductId", "ProductModelId", "BusinessKey", "CartId" }, "IndexPKCartItem")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ProductId", "ProductModelId", "BusinessKey", "CartId" }, "IndexPKCartItem"), new string[0]);

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("eShopAnalysis.CartOrderAPI.Domain.DomainModels.CartAggregate.CartSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CouponDiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<int?>("CouponDiscountType")
                        .HasColumnType("int");

                    b.Property<double>("CouponDiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<bool>("HaveAnySaleItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HaveCouponApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("TotalPriceAfterCouponApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<double>("TotalPriceAfterSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<double>("TotalPriceFinal")
                        .HasColumnType("float");

                    b.Property<double>("TotalPriceOriginal")
                        .HasColumnType("float");

                    b.Property<double>("TotalSaleDiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("eShopAnalysis.CartOrderAPI.Domain.DomainModels.CartAggregate.CartItem", b =>
                {
                    b.HasOne("eShopAnalysis.CartOrderAPI.Domain.DomainModels.CartAggregate.CartSummary", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopAnalysis.CartOrderAPI.Domain.DomainModels.CartAggregate.CartSummary", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
