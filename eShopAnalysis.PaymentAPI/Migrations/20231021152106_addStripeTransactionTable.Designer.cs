// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShopAnalysis.PaymentAPI.Data;

#nullable disable

namespace eShopAnalysis.PaymentAPI.Migrations
{
    [DbContext(typeof(PaymentContext))]
    [Migration("20231021152106_addStripeTransactionTable")]
    partial class addStripeTransactionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eShopAnalysis.PaymentAPI.Models.MomoTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("SubTotal - TotalDiscount + Tax", true);

                    b.Property<double>("TotalDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TransactionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TransactionId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("TransactionId"), new[] { "TransactionStatus" });

                    b.ToTable("MomoTransaction", (string)null);
                });

            modelBuilder.Entity("eShopAnalysis.PaymentAPI.Models.StripeTransaction", b =>
                {
                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("SubTotal - TotalDiscount + Tax", true);

                    b.Property<double>("TotalDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TransactionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("PaymentIntentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentIntentId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("PaymentIntentId"), new[] { "TransactionStatus" });

                    b.ToTable("StripeTransaction", (string)null);
                });

            modelBuilder.Entity("eShopAnalysis.PaymentAPI.Models.UserCustomerMapping", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CustomerId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("CustomerId"), new[] { "UserId" });

                    b.HasIndex("UserId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId"), new[] { "CustomerId" });

                    b.ToTable("UserCustomerMapping", (string)null);
                });

            modelBuilder.Entity("eShopAnalysis.PaymentAPI.Models.MomoTransaction", b =>
                {
                    b.HasOne("eShopAnalysis.PaymentAPI.Models.UserCustomerMapping", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasPrincipalKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopAnalysis.PaymentAPI.Models.StripeTransaction", b =>
                {
                    b.HasOne("eShopAnalysis.PaymentAPI.Models.UserCustomerMapping", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasPrincipalKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
